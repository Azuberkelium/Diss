<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dissertation Progress Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            background-color: #ffffff;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 900px;
        }

        .key-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 0.875rem;
            color: #4b5563;
        }

        .key-color {
            width: 1rem;
            height: 1rem;
            border-radius: 0.25rem;
        }

        .progress-list {
            list-style: none;
            padding-left: 1.5rem;
            position: relative;
        }

        .progress-list::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 2px;
            background-color: #d1d5db;
        }

        .progress-item {
            position: relative;
            margin-bottom: 1rem;
        }

        .progress-item::before {
            content: '';
            position: absolute;
            left: -1.5rem;
            top: 0.75rem;
            width: 1.5rem;
            height: 2px;
            background-color: #d1d5db;
        }

        .button-wrapper {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex-wrap: wrap;
            position: relative;
        }

        .progress-button {
            padding: 0.75rem 1.25rem;
            border-radius: 0.75rem;
            font-weight: 500;
            color: #ffffff;
            transition: transform 0.1s ease, box-shadow 0.1s ease;
            cursor: pointer;
            min-width: 150px;
            text-align: left;
            position: relative;
        }
        
        .progress-button:hover {
            opacity: 0.9;
        }
        
        .progress-button:active {
            transform: scale(0.98);
        }

        .progress-button span {
            display: block;
        }

        .input-group {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            margin-left: 0.5rem;
        }
        
        .input-group label {
            font-size: 0.875rem;
            color: #4b5563;
        }

        .word-count-input {
            width: 80px;
            padding: 0.25rem 0.5rem;
            border-radius: 0.5rem;
            border: 1px solid #d1d5db;
            font-size: 0.875rem;
            text-align: right;
            transition: border-color 0.2s ease;
        }

        .word-count-input:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
        }

        .action-button {
            background-color: #e5e7eb;
            color: #6b7280;
            font-weight: 500;
            padding: 0.5rem 0.75rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
            font-size: 0.875rem;
        }

        .action-button:hover {
            background-color: #d1d5db;
        }

        .word-count-total {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            text-align: right;
            margin-top: 1rem;
        }
        
        .word-count-display {
            font-size: 0.75rem;
            font-weight: 400;
            opacity: 0.9;
        }
        
        .delete-btn {
            background-color: #fca5a5;
            color: #ffffff;
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
            position: absolute;
            top: -0.5rem;
            right: -0.5rem;
        }
        
        .delete-btn:hover {
            background-color: #f87171;
        }
        
        /* Custom Modal for Prompts */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }
        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
            width: 90%;
            max-width: 400px;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }
        .modal.active {
            opacity: 1;
            pointer-events: auto;
        }
        .modal.active .modal-content {
            transform: translateY(0);
        }
    </style>
</head>
<body class="bg-gray-100 p-8">

    <div class="container mx-auto">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Dissertation Progress Tracker</h1>
        
        <div class="key flex justify-center gap-6 mb-8">
            <div class="key-item">
                <div class="key-color bg-red-500"></div>
                <span>Not Looked At</span>
            </div>
            <div class="key-item">
                <div class="key-color bg-orange-500"></div>
                <span>Started Research</span>
            </div>
            <div class="key-item">
                <div class="key-color bg-yellow-500"></div>
                <span>1st Draft</span>
            </div>
            <div class="key-item">
                <div class="key-color bg-lime-500"></div>
                <span>2nd Draft</span>
            </div>
            <div class="key-item">
                <div class="key-color bg-green-700"></div>
                <span>Completed</span>
            </div>
        </div>
        
        <div id="progress-tree" class="space-y-4">
            <!-- Initial buttons will be generated here by JavaScript -->
        </div>

        <div class="word-count-total-container mt-8 pt-4 border-t border-gray-200">
            <div class="flex justify-between items-center">
                <span class="text-lg font-medium text-gray-700">Total Word Count:</span>
                <span id="total-word-count" class="word-count-total">0</span>
            </div>
        </div>
    </div>
    
    <!-- Custom Modal -->
    <div id="custom-prompt-modal" class="modal">
        <div class="modal-content">
            <p class="text-gray-800 text-lg mb-4" id="modal-message">Enter name for the new sub-section:</p>
            <input type="text" id="modal-input" class="w-full px-4 py-2 mb-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <div class="flex justify-end gap-2">
                <button id="modal-cancel-btn" class="bg-gray-300 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-400">Cancel</button>
                <button id="modal-ok-btn" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">OK</button>
            </div>
        </div>
    </div>

    <script>
        const initialSections = [
            { name: 'Title', hasWordCount: false },
            { name: 'Acknowledgements', hasWordCount: false },
            { name: 'Abstract', hasWordCount: true },
            { name: 'Contents', hasWordCount: false },
            { name: 'Introduction', hasWordCount: true },
            { name: 'Literature Review', hasWordCount: true },
            { name: 'Methodology', hasWordCount: true },
            { name: 'Findings', hasWordCount: true },
            { name: 'Conclusion', hasWordCount: true },
            { name: 'Appendices', hasWordCount: false }
        ];

        const colors = ['red-500', 'orange-500', 'yellow-500', 'lime-500', 'green-700'];
        const progressTree = document.getElementById('progress-tree');
        const totalWordCountElement = document.getElementById('total-word-count');
        
        const modal = document.getElementById('custom-prompt-modal');
        const modalMessage = document.getElementById('modal-message');
        const modalInput = document.getElementById('modal-input');
        const modalOkBtn = document.getElementById('modal-ok-btn');
        const modalCancelBtn = document.getElementById('modal-cancel-btn');
        let resolveModalPromise;

        function generateId() {
            return '_' + Math.random().toString(36).substr(2, 9);
        }

        function saveState() {
            const data = [];
            document.querySelectorAll('#progress-tree li').forEach(item => {
                const button = item.querySelector('.progress-button');
                const wordCountInput = item.querySelector('.word-count-input');
                const id = item.dataset.id;
                const parentId = item.dataset.parentId || null;
                const name = button.dataset.name;
                const colorIndex = button.dataset.colorIndex;
                const hasWordCount = item.dataset.hasWordCount === 'true';
                const wordCount = wordCountInput ? wordCountInput.value : null;

                data.push({
                    id,
                    parentId,
                    name,
                    colorIndex,
                    hasWordCount,
                    wordCount
                });
            });
            localStorage.setItem('dissertation-progress', JSON.stringify(data));
        }

        function loadState() {
            const savedState = localStorage.getItem('dissertation-progress');
            if (savedState) {
                const data = JSON.parse(savedState);
                const itemMap = {};
                
                // First pass: create all list items and map them by ID
                data.forEach(item => {
                    const li = createProgressItem(item.name, item.hasWordCount, item.id, item.parentId);
                    itemMap[item.id] = li;
                });

                // Second pass: append to correct parent
                data.forEach(item => {
                    const li = itemMap[item.id];
                    li.querySelector('.progress-button').dataset.colorIndex = item.colorIndex; 
                    if (item.wordCount !== null) {
                        li.querySelector('.word-count-input').value = item.wordCount;
                    }

                    if (item.parentId && itemMap[item.parentId]) {
                        let parentUl = itemMap[item.parentId].querySelector('ul');
                        if (!parentUl) {
                            parentUl = document.createElement('ul');
                            parentUl.className = 'progress-list';
                            itemMap[item.parentId].appendChild(parentUl);
                        }
                        parentUl.appendChild(li);
                    } else {
                        progressTree.appendChild(li);
                    }
                    updateButtonColor(li.querySelector('.progress-button'));
                });
            } else {
                initialSections.forEach(section => {
                    const li = createProgressItem(section.name, section.hasWordCount);
                    progressTree.appendChild(li);
                });
            }
            updateParentCountsAndDisplay();
        }

        function createProgressItem(name, hasWordCount, id = generateId(), parentId = null) {
            const li = document.createElement('li');
            li.className = 'progress-item';
            li.dataset.id = id;
            if (parentId) {
                li.dataset.parentId = parentId;
            }
            li.dataset.hasWordCount = hasWordCount;

            const buttonWrapper = document.createElement('div');
            buttonWrapper.className = 'button-wrapper';

            const button = document.createElement('button');
            button.className = 'progress-button ' + 'bg-' + colors[0];
            button.dataset.colorIndex = 0;
            button.dataset.name = name;
            
            updateButtonText(button, name, 0); // initial text
            
            button.onclick = () => {
                const newIndex = (parseInt(button.dataset.colorIndex) + 1) % colors.length;
                button.dataset.colorIndex = newIndex;
                updateButtonColor(button);
                saveState();
            };
            buttonWrapper.appendChild(button);

            const actionsContainer = document.createElement('div');
            actionsContainer.className = 'flex gap-2';
            buttonWrapper.appendChild(actionsContainer);

            if (hasWordCount) {
                const inputGroup = document.createElement('div');
                inputGroup.className = 'input-group';
                
                const label = document.createElement('label');
                label.textContent = 'WC:';

                const input = document.createElement('input');
                input.type = 'number';
                input.className = 'word-count-input';
                input.placeholder = '0';
                input.value = '0';
                input.min = '0';
                input.oninput = () => {
                    if (input.value === '' || parseInt(input.value) < 0) {
                        input.value = 0;
                    }
                    updateParentCountsAndDisplay();
                    saveState();
                };

                inputGroup.appendChild(label);
                inputGroup.appendChild(input);
                actionsContainer.appendChild(inputGroup);
            }
            
            const addSubsectionBtn = document.createElement('button');
            addSubsectionBtn.className = 'action-button';
            addSubsectionBtn.textContent = '+ Sub';
            addSubsectionBtn.onclick = async () => {
                const subsectionName = await showCustomPrompt('Enter the name for the new sub-section:');
                if (subsectionName) {
                    const newSubsection = createProgressItem(subsectionName, true, generateId(), id);
                    let ul = li.querySelector('ul');
                    if (!ul) {
                        ul = document.createElement('ul');
                        ul.className = 'progress-list';
                        li.appendChild(ul);
                    }
                    ul.appendChild(newSubsection);
                    saveState();
                    updateParentCountsAndDisplay();
                }
            };
            actionsContainer.appendChild(addSubsectionBtn);
            
            const renameBtn = document.createElement('button');
            renameBtn.className = 'action-button';
            renameBtn.textContent = 'Rename';
            renameBtn.onclick = async () => {
                const newName = await showCustomPrompt('Rename section:');
                if (newName) {
                    button.dataset.name = newName;
                    updateButtonText(button, newName, 0);
                    updateParentCountsAndDisplay();
                    saveState();
                }
            };
            actionsContainer.appendChild(renameBtn);

            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn';
            deleteBtn.textContent = 'x';
            deleteBtn.onclick = () => {
                li.remove();
                updateParentCountsAndDisplay();
                saveState();
            };
            buttonWrapper.appendChild(deleteBtn);

            li.appendChild(buttonWrapper);
            return li;
        }
        
        function updateButtonColor(button) {
            button.classList.remove(...colors.map(c => 'bg-' + c));
            const colorIndex = parseInt(button.dataset.colorIndex);
            button.classList.add('bg-' + colors[colorIndex]);
        }

        function updateButtonText(button, name, count) {
            const originalName = button.dataset.name;
            if (button.dataset.hasWordCount === 'true') {
                button.innerHTML = `
                    <span class="text-lg">${originalName}</span>
                    <span class="word-count-display">${count.toLocaleString()} words</span>
                `;
            } else {
                button.textContent = originalName;
            }
        }
        
        function calculateAndPropagateCount(item) {
            let total = 0;
            const hasWordCount = item.dataset.hasWordCount === 'true';
            
            if (hasWordCount) {
                total += parseInt(item.querySelector('.word-count-input').value) || 0;
            }
            
            const sublist = item.querySelector('ul.progress-list');
            if (sublist) {
                sublist.querySelectorAll(':scope > li').forEach(subItem => {
                    total += calculateAndPropagateCount(subItem);
                });
            }
            
            const button = item.querySelector('.progress-button');
            updateButtonText(button, button.dataset.name, total);
            return total;
        }
        
        function updateParentCountsAndDisplay() {
            let totalWordCount = 0;
            const topLevelItems = document.querySelectorAll('#progress-tree > li');
            topLevelItems.forEach(item => {
                totalWordCount += calculateAndPropagateCount(item);
            });
            totalWordCountElement.textContent = totalWordCount.toLocaleString();
        }

        // --- Custom Prompt Functions ---
        function showCustomPrompt(message) {
            return new Promise((resolve) => {
                modal.classList.add('active');
                modalMessage.textContent = message;
                modalInput.value = '';
                modalInput.focus();
                
                resolveModalPromise = resolve;
            });
        }
        
        modalOkBtn.onclick = () => {
            modal.classList.remove('active');
            resolveModalPromise(modalInput.value);
        };
        
        modalCancelBtn.onclick = () => {
            modal.classList.remove('active');
            resolveModalPromise(null);
        };
        
        modalInput.onkeydown = (e) => {
            if (e.key === 'Enter') {
                modalOkBtn.click();
            }
        };

        // Load state on window load
        window.onload = loadState;

    </script>

</body>
</html>
